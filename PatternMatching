package wildcard;

public class PatternMatching {
    public boolean wildcardMatchingDP(String s, String p) {
	if (s == null || p == null)
	    return false;

	int lens = s.length();
	int lenp = p.length();

	boolean[][] table = new boolean[lenp + 1][lens + 1];

	table[0][0] = true;

	for (int j = 1; j <= lens; j++) {
	    table[0][j] = false;
	}

	for (int i = 1; i <= lenp; i++) {
	    table[i][0] = table[i - 1][0] && (p.charAt(i - 1) == '*');
	}

	for (int i = 1; i <= lenp; i++) {
	    char curp = p.charAt(i - 1);
	    for (int j = 1; j <= lens; j++) {
		char curs = s.charAt(j - 1);

		if (curp != '*') {
		    table[i][j] = table[i - 1][j - 1]
			    && (curs == curp || curp == '?');
		} else {
		    for (int k = j; k >= 0; k--) {
			if (table[i - 1][k]) {
			    table[i][j] = true;
			    break;
			}
		    }
		}
	    }
	}

	return table[lenp][lens];

    }

    public boolean wildcardMatchingDPLessSpace(String s, String p) {
	if (s == null || p == null)
	    return false;

	int lens = s.length();
	int lenp = p.length();

	boolean[] table = new boolean[lens + 1];

	table[0] = true;

	for (int i = 1; i <= lenp; i++) {
	    char curp = p.charAt(i - 1);
	    for (int j = lens; j > 0; j--) {
		char curs = s.charAt(j - 1);
		if (curp != '*') {
		    table[j] = (table[j - 1] && (curp == '?' || curp == curs));
		} else {
		    boolean temp = false;
		    for (int k = j; k >= 0; k--) {
			if (table[k]) {
			    temp = true;
			    break;
			}
		    }

		    table[j] = temp;
		}
	    }
	}

	return table[lens];

    }

    public boolean wildcardMatchingGreedy(String s, String p) {
	if (s == null || p == null)
	    return false;

	int lens = s.length();
	int lenp = p.length();

	int curs = 0;
	int curp = 0;

	int stars = -1;
	int starp = -1;

	while (curs < lens) {

	    if (curp < lenp && p.charAt(curp) == '*') {
		stars = curs;
		starp = curp;
		curp = starp + 1;
		continue;
	    }

	    if (curp < lenp
		    && (p.charAt(curp) == s.charAt(curs) || p.charAt(curp) == '?')) {
		curs++;
		curp++;
		continue;
	    }

	    if (stars == -1)
		return false;

	    stars++;
	    curs = stars;
	    curp = starp + 1;
	}

	while (curp < lenp && p.charAt(curp) == '*') {
	    curp++;
	}

	return curp == lenp;

    }

    public static void main(String[] args) {
	PatternMatching pm = new PatternMatching();
	String s = "ab*cdec";
	String p = "ab*c";
	boolean res1 = pm.wildcardMatchingDP(s, p);
	boolean res2 = pm.wildcardMatchingGreedy(s, p);
	boolean res3 = pm.wildcardMatchingDPLessSpace(s, p);
	System.out.println(res1);
	System.out.println(res2);
	System.out.println(res3);
    }
}
