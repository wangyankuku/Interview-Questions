//How many characters in the front of a string would need to be added in order to make it a palindrome.


public class Solution {
    public static int findFrontCharNum(String str) {
    	if (str == null || str.length() == 0) {
    	    return 0;
    	}
    
    	int len = str.length();
    
    	int l;
    	int r;
    
    	int min = Integer.MAX_VALUE;
    
    	for (int i = 0; i <= (len - 1) / 2; i++) {
    	    // single
    	    l = i - 1;
    	    r = i + 1;
    
    	    while (l >= 0 && r < len && str.charAt(l) == str.charAt(r)) {
        		l--;
        		r++;
    	    }
    
    	    if (l < 0) {
    		    min = Math.min(min, (len - 2 * i - 1));
    	    }
    
    	    // double
    	    l = i;
    	    r = i + 1;
    
    	    while (l >= 0 && r < len && str.charAt(l) == str.charAt(r)) {
        		l--;
        		r++;
    	    }
    
    	    if (l < 0) {
    		    min = Math.min(min, (len - 2 * i - 2));
    	    }
    	}
    
    	  return min;
      }
    
      public static int findFrontCharNum2(String str) {
        	if (str == null || str.length() == 0) {
        	    return 0;
        	}
        	
        	if (isPalindrome(str)) {
        	    return 0;
        	}
        
        	int len = str.length();
        	
        	int min = Integer.MAX_VALUE;
        	
        	StringBuffer sb = new StringBuffer(str);
        	
        	for (int i = 0;i < len - 1;i++) {
        	    sb.insert(i, str.charAt(len - 1 - i));
        	    if (isPalindrome(sb.toString())) {
          		min = i + 1;
          		break;
        	    }
        	}
        	
        	return min;
      }
        
        private static boolean isPalindrome(String str) {
    	    int i = 0;
    	    int j = str.length() - 1;
    	
        	while (i < j) {
        	    
        	    if (str.charAt(i) != str.charAt(j)) {
        		    return false;
        	    }
        	    
        	    i++;
        	    j--;
        	}
        	
        	return true;
    }
}
