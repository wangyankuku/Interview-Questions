package tree;

import java.util.Stack;

public class TreeToDDL {
    public TreeNode treeToDDL(TreeNode root) {
	if (root == null)
	    return null;

	TreeNode cur = root;
	TreeNode pre = null;
	TreeNode res = null;
	Stack<TreeNode> stack = new Stack<TreeNode>();

	while (cur != null || !stack.isEmpty()) {
	    while (cur != null) {
		stack.push(cur);
		cur = cur.left;
	    }

	    cur = stack.pop();

	    // set the new root
	    if (res == null) {
		res = cur;
	    }

	    // deal with the temp node
	    if (pre != null) {
		pre.right = cur;
		cur.left = pre;
	    }
	    pre = cur;

	    cur = cur.right;

	}

	return res;
    }

    public static void main(String[] args) {
	TreeNode root = new TreeNode(3);
	root.left = new TreeNode(1);
	root.right = new TreeNode(5);
	root.left.left = new TreeNode(2);
	root.left.right = new TreeNode(4);
	root.right = new TreeNode(5);
	root.right.left = new TreeNode(7);

	TreeToDDL ttd = new TreeToDDL();
	TreeNode node = ttd.treeToDDL(root);
	System.out.print(node.val);
	while (node.right != null) {
	    node = node.right;
	    System.out.print(node.val);
	}

	System.out.println();
	System.out.print(node.val);
	while (node.left != null) {
	    node = node.left;
	    System.out.print(node.val);
	}
    }
}
