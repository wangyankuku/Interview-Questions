/* @Author: Yan
 * This version use 3 string as the buffer, 
 * which is reduced to 2 string in the GOL2
 * */


package test;

public class GameOfLife1 {

	public void play(String[] grid, int generations) {

		print(grid);

		for (int i = 0; i < generations; i++) {
			transform(grid);
			print(grid);
		}
	}

	private void transform(String[] grid) {

		if (grid == null || grid.length == 0 || grid[0].length() == 0) {
			return;
		}

		String r1 = null;
		String r2 = grid[0];
		String r3 = grid[1];

		int rowsLen = grid.length;
		int columnsLen = grid[0].length();

		for (int i = 0; i < rowsLen; i++) {
			for (int j = 0; j < columnsLen; j++) {
				int numAlive = getAliveNum(j, r1, r2, r3);

				if (numAlive < 2 || numAlive > 3) {
					grid[i] = grid[i].substring(0, j) + '#' + grid[i].substring(j + 1);
				} else if (numAlive == 3) {
					grid[i] = grid[i].substring(0, j) + 'O' + grid[i].substring(j + 1);
				} else {
					// keep the same
				}
			}

			r1 = r2;
			r2 = r3;
			if (i + 2 < rowsLen) {
				r3 = grid[i + 2];
			} else {
				r3 = null;
			}
		}

		return;
	}

	private int getAliveNum(int pos, String r1, String r2, String r3) {

		int numAlive = 0;

		int len = r2.length();

		String[] strs = {
			r1, r2, r3
		};

		for (String str: strs) {
			if (str != null) {
				if (pos - 1 >= 0 && str.charAt(pos - 1) == 'O') {
					numAlive++;
				}

				if (str.charAt(pos) == 'O') {
					numAlive++;
				}

				if (pos + 1 < len && str.charAt(pos + 1) == 'O') {
					numAlive++;
				}
			}
		}

		// remove itself
		if (r2.charAt(pos) == 'O') {
			numAlive--;
		}

		return numAlive;

	}

	private void print(String[] grid) {
		for (String s: grid) {
			System.out.println(s);
		}
		System.out.println();
		System.out.println();
	}

	public static void main(String[] args) {
		GameOfLife1 gol = new GameOfLife1();

		String[] grid = {
			"#####", "##O##", "##O##", "##O##", "#####"
		};

		gol.play(grid, 1000);

	}
}
