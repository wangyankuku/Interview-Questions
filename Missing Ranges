// Given a sorted integer array where the range of elements are [min, max] inclusive, 
// return its missing ranges.
// eg. input: { 10, 11, 12, 20, 97, 102, 103, 299 } output: [1->9, 13->19, 21->96, 98->101, 104->298, 300->50000]

public class Solution {
	public List < String > findMissingRanges(int[] numbers, int min, int max) {
		if (numbers == null) {
			// 			throw new Exception();
		}

		int len = numbers.length;

		List < String > list = new ArrayList < String > ();

		int pre = min - 1;

		// this will be from min to max,  m
		for (int i = 0; i < len; i++) {
			if (pre != numbers[i] - 1) {
				if (numbers[i] - pre == 2) {

					if (pre + 1 > max) {
						return list;
					}

					list.add(String.valueOf(pre + 1));
				} else {
					if (numbers[i] - 1 > max) {
						list.add((pre + 1) + "->" + max);
						return list;
					}

					list.add((pre + 1) + "->" + (numbers[i] - 1));
				}
			}
			pre = numbers[i];
		}

		if (pre < max) {
			if (pre == max - 1) {
				list.add(String.valueOf(max));
			} else {
				list.add((pre + 1) + "->" + max);
			}
		}

		return list;
	}
}
